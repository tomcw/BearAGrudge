;license:MIT
;(c) 2021-2022 by Tom Charlesworth
;
; AY8913 related
;

;------------------------------------------------------------------------------

IsEchoPlus
; Pre: Detected a single, but dual-mapped 6522 at $00 and $80; not //c
; Post: isEchoPlus, C=0(Echo+), C=1(Not Echo+)
; Trashes: zpTmp5

	lda		#SY6522_A_BASE
	sta		zpTmp3
	lda		#1
	sta		isEchoPlus
	jsr		Init6522ForAY			; pre: zpTmp3, isEchoPlus=1

	ldx		#AY_ECHO_CS1|AY_LATCH
	lda		#AY_AFINE
	ldy		#$11
	jsr		AY_Echo_WriteRegValue	; post: trashes zpTmp5

	ldx		#AY_ECHO_CS2|AY_LATCH
	lda		#AY_AFINE
	ldy		#$33
	jsr		AY_Echo_WriteRegValue	; post: trashes zpTmp5

	ldx		#AY_ECHO_CS1|AY_LATCH
	ldy		#AY_AFINE
	jsr		AY_Echo_ReadRegValue
	cmp		#$11
	bne		+

	ldx		#AY_ECHO_CS2|AY_LATCH
	ldy		#AY_AFINE
	jsr		AY_Echo_ReadRegValue
	cmp		#$33
	clc
	beq		++

+	lda		#0
	sta		isEchoPlus
	sec
++	rts

;------------------------------------------------------------------------------

DetectAY8913
; Pre: zpTmp1 = 6522 bitmap in b1:0
;	hasAY8913 = 0
;	isPhasorCard, isMegaAudioCard, isMB4C, isEchoPlus, isSDMusic
; Post:
;	hasAY8913 = %0000,%0001,%0010,%0011 - for Mockingboard or Echo+ or MB4C
;	hasAY8913 = %0011,%0111,%1011,%1111 - for Phasor (NB. only test for 2nd AYs if 1st AYs = %11)

	lda		zpTmp1
	sta		@smcPh+1

	lda		isPhasorCard
	beq		+
		lda		#PH_MOCKINGBOARD
		jsr		SetPhasorMode
+

	lda		isMegaAudioCard		; Doesn't support AY register reads
	ora		isMB4C				; TODO: support MB4C (just like a regular Mockingboard?)
	ora		isSDMusic			; TODO: support SD Music (just like a regular Mockingboard?)
	beq		+
		lda		#%00000011
		sta		hasAY8913		; For now just assume they are all working
		rts
+

	lda		isEchoPlus			; Echo+ AY detection
	beq		@mb

	lda		#SY6522_A_BASE		; only one 6522, but use zpTmp3 (6522-A or 6522-B) to config chip-select
	sta		zpTmp3
	lda		#1					; hasAY8913 mask
	sta		zpTmp2

-		jsr		Init6522ForAY

		lda		#AY_AFINE
		ldy		#$AA
		jsr		AY_Echo_WriteRegValueEx

		lda		#AY_BFINE
		ldy		#$55
		jsr		AY_Echo_WriteRegValueEx

		lda		#AY_CFINE
		ldy		#$69
		jsr		AY_Echo_WriteRegValueEx

		;

		ldy		#AY_AFINE
		jsr		AY_Echo_ReadRegValueEx
		cmp		#$AA
		bne		+

		ldy		#AY_BFINE
		jsr		AY_Echo_ReadRegValueEx
		cmp		#$55
		bne		+

		ldy		#AY_CFINE
		jsr		AY_Echo_ReadRegValueEx
		cmp		#$69
		bne		+

			lda		hasAY8913
			ora		zpTmp2
			sta		hasAY8913

+		asl		zpTmp2			; AY mask <<= 1
		lda		zpTmp3
		eor		#$80
		sta		zpTmp3
		bne		-

		rts

		;------------------------------

@mb	; Mockingboard

	lda		#SY6522_A_BASE
	sta		zpTmp3
	lda		#1					; hasAY8913 mask
	sta		zpTmp2

-		lsr		zpTmp1			; 6522 at this addr?
		bcc		+

		jsr		Init6522ForAY

		lda		#AY_AFINE
		ldx		#$AA
		jsr		AY_WriteRegValue

		lda		#AY_BFINE
		ldx		#$55
		jsr		AY_WriteRegValue

		lda		#AY_CFINE
		ldx		#$69
		jsr		AY_WriteRegValue

		;

		ldx		#AY_AFINE
		jsr		AY_ReadRegValue
		cmp		#$AA
		bne		+

		ldx		#AY_BFINE
		jsr		AY_ReadRegValue
		cmp		#$55
		bne		+

		ldx		#AY_CFINE
		jsr		AY_ReadRegValue
		cmp		#$69
		bne		+

			lda		hasAY8913
			ora		zpTmp2
			sta		hasAY8913

+		asl		zpTmp2			; mask <<= 1
		lda		zpTmp3
		eor		#$80
		sta		zpTmp3
		bne		-

	lda		isPhasorCard
	beq		@done

	;
	; Phasor: detect any 2nd-ary AYs
	;

@smcPh	lda		#0
	sta		zpTmp1

	lda		#PH_PHASOR
	jsr		SetPhasorMode

	lda		#SY6522_A_PH_BASE
	sta		zpTmp3				; 6522-A base addr *for Phasor*
	lda		#%00000100			; hasAY8913 mask
	sta		zpTmp2

-		lsr		zpTmp1			; 6522 at this addr?
		bcc		+

		jsr		Init6522ForAY

		lda		#AY_AFINE
		ldx		#$AA
		jsr		AY2_WriteRegValue

		lda		#AY_BFINE
		ldx		#$55
		jsr		AY2_WriteRegValue

		lda		#AY_CFINE
		ldx		#$69
		jsr		AY2_WriteRegValue

		;

		ldx		#AY_AFINE
		jsr		AY2_ReadRegValue
		cmp		#$AA
		bne		+

		ldx		#AY_BFINE
		jsr		AY2_ReadRegValue
		cmp		#$55
		bne		+

		ldx		#AY_CFINE
		jsr		AY2_ReadRegValue
		cmp		#$69
		bne		+

			lda		hasAY8913
			ora		zpTmp2
			sta		hasAY8913

+		asl		zpTmp2			; mask <<= 1
		lda		#SY6522_B_BASE
		cmp		zpTmp3
		beq		+
		sta		zpTmp3
		bne		-

+	lda		#PH_MOCKINGBOARD
	jsr		SetPhasorMode

	;

@done
	rts

;------------------------------------------------------------------------------

Init6522ForAY
; Pre: phasorMode
;	zpTmp3 = SY6522_A_BASE or SY6522_A_PH_BASE or SY6522_B_BASE
; Post: Y = SY6522_ORA for chip A or B

	lda		#SY6522_DDRB
	ora		zpTmp3
	tay
	lda		phasorMode
	cmp		#PH_PHASOR
	beq		+
		lda		#$07
		bne		++
+		lda		#$1f
++	sta		(MBBase),y

	lda		#SY6522_DDRA
	ora		zpTmp3
	tay
	lda		#$ff	; output
	sta		(MBBase),y

	ldy		zpTmp3
	jmp		SF_ChipReset		; Post: Y=SY6522_ORA for chip A or B

	;

AY_WriteRegValue
; Pre: Y = SY6522_ORA for chip A or B
;	A=reg#
;	X=value
; Post: Y = SY6522_ORA for chip A or B
	jsr		SF_SelectReg
	txa
	jmp		SF_WriteReg

AY_ReadRegValue
; Pre: Y = SY6522_ORA for chip A or B
;	X=reg#
; Post: Y = SY6522_ORA for chip A or B
;	A=value
	jsr		AY_SetPortAOutput
	txa
	jsr		SF_SelectReg
	jsr		AY_SetPortAInput
	jmp		AY_ReadReg

	;

AY_SetPortAOutput
; Pre: Y = SY6522_ORA for chip A or B
; Post: Y = SY6522_ORA for chip A or B
	iny
	iny		; Y = DDRA
	lda		#$ff
	sta		(MBBase),y
	dey
	dey		; Y = ORA
	rts

AY_SetPortAInput
; Pre: Y = SY6522_ORA for chip A or B
; Post: Y = SY6522_ORA for chip A or B
	iny
	iny		; Y = DDRA
	lda		#$0
	sta		(MBBase),y
	dey
	dey		; Y = ORA
	rts

	;

AY_ReadReg
; Pre: Y = SY6522_ORA for chip A or B
;	6522.DDRA = $00 (Port-A direction = input)
; Post: Y = SY6522_ORA for chip A or B
;	A = data
	lda		#AY_READ
	dey		; Y = ORB (reg#0)
	sta		(MBBase),y
	iny		; Y = ORA (reg#1)
	lda		(MBBase),y		; Read Port-A
	tax
	lda		#AY_INACTIVE
	dey		; Y = ORB (reg#0)
	sta		(MBBase),y
	iny		; Y = ORA (reg#1)
	txa
	rts

SF_SelectReg
; Pre: Y = SY6522_ORA for chip A or B
;	A = reg#
; Post: Y = SY6522_ORA for chip A or B
	sta		(MBBase),y
	lda		#AY_LATCH
	bne		+

SF_WriteReg
; Pre: Y = SY6522_ORA for chip A or B
;	6522.DDRA = $FF (Port-A direction = output)
;	A = data
; Post: Y = SY6522_ORA for chip A or B
	sta		(MBBase),y
	lda		#AY_WRITE
	bne		+

SF_ChipReset
; NB. For native Phasor mode, reset both AY's, since cmd=AY_RESET|(%00<<3) - and CS is active low
; Pre: Y = SY6522_A_BASE or SY6522_B_BASE
; Post: Y = SY6522_ORA for chip A or B
	lda		#AY_RESET
	beq		++

+	dey		; Y = ORB (reg#0)

++	sta		(MBBase),y
	lda		#AY_INACTIVE
	sta		(MBBase),y
	iny		; Y = ORA (reg#1)
	rts

;------------------------------------------------------------------------------
; Phasor (native mode) routines:

!if 0 {
AY1_ReadReg
; Pre: Y = SY6522_ORA for chip A or B
;	6522.DDRA = $00 (Port-A direction = input)
; Post: Y = SY6522_ORA for chip A or B
;	A = data
	lda		#AY_READ|AY_CS1
	dey		; Y = ORB (reg#0)
	sta		(MBBase),y
	iny		; Y = ORA (reg#1)
	lda		(MBBase),y		; Read Port-A
	tax
	lda		#AY_INACTIVE|AY_CS1
	dey		; Y = ORB (reg#0)
	sta		(MBBase),y
	iny		; Y = ORA (reg#1)
	txa
	rts
}
AY2_ReadReg
	lda		#AY_READ|AY_CS2
	dey		; Y = ORB (reg#0)
	sta		(MBBase),y
	iny		; Y = ORA (reg#1)
	lda		(MBBase),y		; Read Port-A
	tax
	lda		#AY_INACTIVE|AY_CS2
	dey		; Y = ORB (reg#0)
	sta		(MBBase),y
	iny		; Y = ORA (reg#1)
	txa
	rts

AY1_SelectReg
; Pre: Y = SY6522_ORA for chip A or B
;	A = reg#
; Post: Y = SY6522_ORA for chip A or B
	sta		(MBBase),y
	lda		#AY_LATCH|AY_CS1
	bne		+
AY2_SelectReg
	sta		(MBBase),y
	lda		#AY_LATCH|AY_CS2
	bne		++

AY1_WriteReg
; Pre: Y = SY6522_ORA for chip A or B
;	6522.DDRA = $FF (Port-A direction = output)
;	A = data
; Post: Y = SY6522_ORA for chip A or B
	sta		(MBBase),y
	lda		#AY_WRITE|AY_CS1
	bne		+
AY2_WriteReg
	sta		(MBBase),y
	lda		#AY_WRITE|AY_CS2
	bne		++

+	dey		; Y = ORB (reg#0)
	sta		(MBBase),y
	lda		#AY_INACTIVE|AY_CS1
	sta		(MBBase),y
	iny		; Y = ORA (reg#1)
	rts

++	dey		; Y = ORB (reg#0)
	sta		(MBBase),y
	lda		#AY_INACTIVE|AY_CS2
	sta		(MBBase),y
	iny		; Y = ORA (reg#1)
	rts

;------------------------------------------------------------------------------

AY1_WriteRegValue
; Pre: Y = SY6522_ORA for chip A or B
;	A=reg#
;	X=value
	jsr		AY1_SelectReg
	txa
	jmp		AY1_WriteReg

AY2_WriteRegValue
; Pre: Y = SY6522_ORA for chip A or B
;	A=reg#
;	X=value
	jsr		AY2_SelectReg
	txa
	jmp		AY2_WriteReg

!if 0 {
AY1_ReadRegValue
; Pre: Y = SY6522_ORA for chip A or B
;	X=reg#
; Post:
;	A=value
	jsr		AY_SetPortAOutput
	txa
	jsr		AY1_SelectReg
	jsr		AY_SetPortAInput
	jmp		AY1_ReadReg
}

AY2_ReadRegValue
; Pre: Y = SY6522_ORA for chip A or B
;	X=reg#
; Post:
;	A=value
	jsr		AY_SetPortAOutput
	txa
	jsr		AY2_SelectReg
	jsr		AY_SetPortAInput
	jmp		AY2_ReadReg

;------------------------------------------------------------------------------
; Echo+ routines:

AY_Echo_SelectReg
; Pre: X = [AY_ECHO_CS1|AY_ECHO_CS2]|AY_LATCH
;	A = reg#
; Post: X is preserved, Y trashed
	ldy		#SY6522_A_BASE+SY6522_ORA
	sta		(MBBase),y
	dey						; Y = ORB (reg#0)
	txa						; A = CS_ECHO_x|AY_LATCH
	sta		(MBBase),y
	and		#$1C			; A = CS_ECHO_x|AY_INACTIVE
	sta		(MBBase),y
	rts

;

AY_Echo_WriteReg
; Pre: X = [AY_ECHO_CS1|AY_ECHO_CS2]|AY_LATCH
;	6522.DDRA = $FF (Port-A direction = output)
;	A = data
; Post: X is preserved, Y trashed
;	Z = 0
	ldy		#SY6522_A_BASE+SY6522_ORA
	sta		(MBBase),y
	dey						; Y = ORB (reg#0)
	txa
	and		#$1E			; A = CS_ECHO_x|AY_WRITE
	sta		(MBBase),y
	and		#$1C			; A = CS_ECHO_x|AY_INACTIVE
	sta		(MBBase),y
	rts

;

AY_Echo_ReadReg
; Pre: X = [AY_ECHO_CS1|AY_ECHO_CS2]|AY_LATCH
;	6522.DDRA = $00 (Port-A direction = input)
; Post: X is preserved, Y trashed
;	A = data
;	Z = 0
	ldy		#SY6522_A_BASE+SY6522_ORB
	txa
	and		#$1D			; A = CS_ECHO_x|AY_READ
	sta		(MBBase),y
	iny						; Y = ORA (reg#1)
	lda		(MBBase),y		; Read Port-A
	pha
	txa
	and		#$1C			; A = CS_ECHO_x|AY_INACTIVE
	dey						; Y = ORB (reg#0)
	sta		(MBBase),y
	pla
	rts

;--------------------------------------

AY_Echo_WriteRegValueEx
; Pre: zpTmp3 = SY6522_A_BASE, SY6522_B_BASE - used to config chip-select
	ldx		zpTmp3
	bne		+
	ldx		#AY_ECHO_CS1|AY_LATCH
	bne		AY_Echo_WriteRegValue
+	ldx		#AY_ECHO_CS2|AY_LATCH
	; fall through...

AY_Echo_WriteRegValue
; Pre: X = [AY_ECHO_CS1|AY_ECHO_CS2]|AY_LATCH
;	A=reg#
;	Y=value
; Post:
;	X is preserved, Y trashed
;	Z = 0
;	zpTmp5 trashed
	sty		zpTmp5			; save value
	jsr		AY_Echo_SelectReg
	lda		zpTmp5			; restore value
	jmp		AY_Echo_WriteReg

;

AY_Echo_ReadRegValueEx
; Pre: zpTmp3 = SY6522_A_BASE, SY6522_B_BASE - used to config chip-select
	ldx		zpTmp3
	bne		+
	ldx		#AY_ECHO_CS1|AY_LATCH
	bne		AY_Echo_ReadRegValue
+	ldx		#AY_ECHO_CS2|AY_LATCH
	; fall through...

AY_Echo_ReadRegValue
; Pre: X = [AY_ECHO_CS1|AY_ECHO_CS2]|AY_LATCH
;	Y=reg#
; Post:
;	A=value
;	X is preserved, Y trashed
;	Z = 0
	tya
	pha						; save reg#
	ldy		#SY6522_A_BASE+SY6522_ORA
	jsr		AY_SetPortAOutput
	pla						; restore reg#
	jsr		AY_Echo_SelectReg
	ldy		#SY6522_A_BASE+SY6522_ORA
	jsr		AY_SetPortAInput
	jmp		AY_Echo_ReadReg
