;ACME 0.97

!cpu 6502	; Compatible with all Apple2's
!to "bearagrudge", plain
!sl "bearagrudge.labels"
*=$2000

AY_UPDATE_OLD = 0

;------------------------------------------------------------------------------

!source "AppleDefs.a"
!source "MockingboardDefs.a"
!source "MB-Macros.a"

;------------------------------------------------------------------------------

TmpL    = $fc	; alias with pAYData
pAYData = $fc
MBBase	= $fe
MBBaseL	= MBBase
MBBaseH	= MBBase+1

!zone code

;--------------------------------------

INIT:
;	+MB_Init1	RegE

	lda		pAYData+0
	sta		saveFC
	lda		pAYData+1
	sta		saveFD
	lda		MBBaseL
	sta		saveFE
	lda		MBBaseH
	sta		saveFF

	lda		$9e
	sta		save9E
	lda		$9f
	sta		save9F
	lda		$a7
	sta		saveA7
	lda		$a8
	sta		saveA8
	lda		$ae
	sta		saveAE
	lda		$af
	sta		saveAF

	;

	lda		#<srcAY0End
	sta		_byte_lo
	lda		#>srcAY0End
	sta		_byte_hi
	cld
	jsr		exod_decrunch

	; append the end AY data marker

	lda		#<AYDataEnd
	sta		$fc
	lda		#>AYDataEnd
	sta		$fd

	lda		#<$4000+$1FF8	; dstEnd
	sta		$fe
	lda		#>$4000+$1FF8
	sta		$ff

	ldy		#0
-		lda		($fc),y
		sta		($fe),y
		iny
		cpy		#lenAYDataEnd
		bne		-

	;

	jsr		SF_GetMBSlot
	bne		GotMBSlot

		; MB not found!
		brk

GotMBSlot:
	stx		nMBBaseHi

!if AY_UPDATE_OLD {
	stx		MBx1+2
	stx		MBx2+2
	stx		MBx3+2
	stx		MBx4+2
} else {
	stx		MB1+2
	stx		MB2+2
	stx		MB3+2
	stx		MB4+2
	stx		MB5+2
	stx		MB6+2

	stx		MB1x+2
	stx		MB2x+2
	stx		MB3x+2
	stx		MB4x+2
	stx		MB5x+2
	stx		MB6x+2
}
	stx		MB7+2

	;

	lda		#$07
	ldy		#SY6522_DDRB
	sta		(MBBase),y
	ldy		#SY6522_DDRB+$80
	sta		(MBBase),y

	lda		#$ff
	ldy		#SY6522_DDRA
	sta		(MBBase),y
	ldy		#SY6522_DDRA+$80
	sta		(MBBase),y

	lda		#AY_RESET
	ldy		#SY6522_ORB
	sta		(MBBase),y
	ldy		#SY6522_ORB+$80
	sta		(MBBase),y

	;

;	+MB_Init2

	; Setup Timer1 IRQ to trigger at 50Hz
	; Apple CLK = 1.022727 MHz, so set Timer1=0x4fe7

	sei

	lda		#$e7
	ldy		#SY6522_TIMER1L_COUNTER
	sta		(MBBase),y
	lda		#$4f
	ldy		#SY6522_TIMER1H_COUNTER
	sta		(MBBase),y

	lda		#ACR_FREERUNNING
	ldy		#SY6522_ACR
	sta		(MBBase),y				; Free running timer

	lda		#IER_SET|IxR_TIMER1
	ldy		#SY6522_IER	
	sta		(MBBase),y				; Enable Timer1 IRQ

	lda		#<Interrupt				; ADDR_L
	sta		IRQL
	lda		#>Interrupt				; ADDR_H 
	sta		IRQH

	lda		#<$4000
	sta		pAYData+0
	lda		#>$4000
	sta		pAYData+1

	lda		#0
	sta		AYDataDoneFlag
	sta		nFrameNum+0
	sta		nFrameNum+1
	sta		nFrameNum+2
	sta		g_MusicUpdate

	cli

loop	lda		AYDataDoneFlag
		bne		done
		lda		$c000
		bpl		loop
		bit		$c010

pause	; step via one-shot mode
		sei
		lda		#ACR_ONESHOT
		ldy		#SY6522_ACR
		sta		(MBBase),y
		lda		nFrameNum+2
		cli
-			cmp		nFrameNum+2
			beq		-

		ldy		nFrameNum+1			; Second
		ldx		nFrameNum+2			; Frame#
		jsr		$f940				; PRNTYX
-			lda		$c000
			bpl		-
		bit		$c010
		tax		; keycode

		lda		#$e7
		ldy		#SY6522_TIMER1L_COUNTER
		sta		(MBBase),y
		lda		#$4f
		ldy		#SY6522_TIMER1H_COUNTER
		sta		(MBBase),y

		cpx		#' '+$80
		beq		pause

		; restart
		lda		#ACR_FREERUNNING
		ldy		#SY6522_ACR
		sta		(MBBase),y				; Free running timer
		jmp		loop

done
	lda		#IER_CLR|IxR_TIMER1
	ldy		#SY6522_IER	
	sta		(MBBase),y				; Disable Timer1 IRQ

	lda		save9E
	sta		$9e
	lda		save9F
	sta		$9f
	lda		saveA7
	sta		$a7
	lda		saveA8
	sta		$a8
	lda		saveAE
	sta		$ae
	lda		saveAF
	sta		$af

	lda		saveFC
	sta		pAYData+0
	lda		saveFD
	sta		pAYData+1
	lda		saveFE
	sta		MBBaseL
	lda		saveFF
	sta		MBBaseH

	rts

;--------------------------------------

Interrupt
; Pre:
;	6502 has pushed P
;	Apple ROM has stored A to $45 (not Apple //e ROM!)
;

	txa 
	pha
	tya
	pha

	jsr		lefe5

	;

	lda		AYDataDoneFlag
	bne		.done

	lda		g_MusicUpdate
	eor		#1
	sta		g_MusicUpdate
	beq		.done

	ldx		#AY_INACTIVE
	ldy		#0
.sf_loop0
MB1x		sty		CARD_BASE+SY6522_ORA
			lda		#AY_LATCH
MB2x		sta		CARD_BASE+SY6522_ORB
MB3x		stx		CARD_BASE+SY6522_ORB	; Set INACTIVE
			lda		(pAYData),y
!if 1 {		; Noise Period: Convert ZX to MB
			cpy		#AY_NOISEPER
			bne		+
			and		#AY_NOISE_MASK
			cmp		#1
			beq		+
			lsr
+
}
MB4x		sta		CARD_BASE+SY6522_ORA
			lda		#AY_WRITE
MB5x		sta		CARD_BASE+SY6522_ORB
MB6x		stx		CARD_BASE+SY6522_ORB	; Set INACTIVE
			iny
			cpy		#AY_EFINE
			bne		.sf_loop0

	clc
	lda		pAYData+0
	adc		#AY_EFINE
	sta		pAYData+0
	lda		pAYData+1
	adc		#0
	sta		pAYData+1

	; $ff,$ff = end of data
	ldy		#0
	lda		(pAYData),y
	iny
	and		(pAYData),y
	cmp		#$ff
	bne		+
		sta		AYDataDoneFlag
+

	;

.done
	lda		#IER_CLR|IxR_TIMER1
MB7	sta		CARD_BASE+SY6522_IFR	; Clear Timer1 IRQ flag

	pla
	tay
	pla
	tax

	lda		$45
	rti


;--------------------------------------

!if AY_UPDATE_OLD {
	+SF_UpdateAY
} else {
SF_SelectReg	; Select AY reg
MB1		sta		CARD_BASE+SY6522_ORA
		ldx		#AY_INACTIVE
		lda		#AY_LATCH
MB2		sta		CARD_BASE+SY6522_ORB
MB3		stx		CARD_BASE+SY6522_ORB	; Set INACTIVE
		rts

SF_WriteReg		; Write AY reg
MB4		sta		CARD_BASE+SY6522_ORA
		ldx		#AY_INACTIVE
		lda		#AY_WRITE
MB5		sta		CARD_BASE+SY6522_ORB
MB6		stx		CARD_BASE+SY6522_ORB	; Set INACTIVE
		rts
}

;--------------------------------------

lefe5:
	inc		nFrameNum+2
	lda		nFrameNum+2
	cmp		#50
	bne		.fnum_ok
		lda		#0
		sta		nFrameNum+2
		inc		nFrameNum+1
		lda		nFrameNum+1
		cmp		#60
		bne		.fnum_ok
			lda		#0
			sta		nFrameNum+1
			inc		nFrameNum+0
.fnum_ok:

	rts

;------------------------------------------------------------------------------

; Skyfox MB detection routine:

SF_GetMBSlot:
; Pre:
; Post:
;  Z = 0 (NE) : MB detected
;  X = HI(MB base address)
;  (MBBase) = MB slot address
;

	jsr		SF_Detect

.Loop:	stx		TmpL
		jsr		SF_Detect
		cpx		TmpL
		bne		.Loop

	cpx		#$C8
	rts

;--------------------------------------

SF_Detect:
	lda		#0
	sta		MBBaseL
	lda		#$c1
	sta		MBBaseH
	ldx		#7

.SlotNext:
		ldy		#$00+SY6522_TIMER1L_COUNTER
		jsr		SF_GetTimerL
		bne		.SlotLoop

		ldy		#$80+SY6522_TIMER1L_COUNTER
		jsr		SF_GetTimerL
		beq		.SlotDone

.SlotLoop:
		inc		MBBaseH
		dex
		bne		.SlotNext

.SlotDone:
	ldx		MBBaseH
	rts

;--------------------------------------


SF_GetTimerL:
	lda		(MBBase),y
	cmp		MBBaseL
	sbc		(MBBase),y
	cmp		#$08
	rts

;------------------------------------------------------------------------------

!zone data

nMBBaseHi		!byte 0
AYDataDoneFlag	!byte 0
nFrameNum		!byte 0,0,0	; Minute:Second:FrameNum (@ 50Hz)
g_MusicUpdate	!byte 0

save9E			!byte 0
save9F			!byte 0
saveA7			!byte 0
saveA8			!byte 0
saveAE			!byte 0
saveAF			!byte 0

saveFC			!byte 0
saveFD			!byte 0
saveFE			!byte 0
saveFF			!byte 0

;--------------------------------------

DECRUNCH_FORWARDS = 0

exod_get_crunched_byte:
!if DECRUNCH_FORWARDS = 0 {
        lda _byte_lo
        bne _byte_skip_hi
        dec _byte_hi
_byte_skip_hi:
        dec _byte_lo
}
_byte_lo = * + 1
_byte_hi = * + 2
        lda $ffff               ; needs to be set correctly before
!if DECRUNCH_FORWARDS != 0 {
        inc _byte_lo
        bne _byte_skip_hi
        inc _byte_hi
_byte_skip_hi:
}
        rts                     ; decrunch_file is called.
; end_of_data needs to point to the address just after the address
; of the last byte of crunched data.
; -------------------------------------
!source "exodecrunch.asm"

;--------------------------------------

AYDataCompressed
srcAY0 = *
!binary "bearagrudge-AY0-comp.bin"
srcAY0End = *
lenAY0 = * - srcAY0

AYDataEnd
	!byte $00,$00,$00,$00,$00,$00,$00,$3F,$00,$00,$00 ; Set all channels off
	!byte $ff,$ff
lenAYDataEnd = * - AYDataEnd
