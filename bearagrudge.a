;license:MIT
;(c) 2023 by Tom Charlesworth
;
; Bear A Grudge:
; . Playback tune on 2 (or 4) AY-3-8913's
;

;ACME 0.97
;
!cpu 6502	; Compatible with all Apple2's
!to "bearagrudge", plain
!sl "bearagrudge.labels"
*=$6000

;------------------------------------------------------------------------------

!source "AppleDefs.a"
!source "MockingboardDefs.a"

;------------------------------------------------------------------------------

ZP_BASE = $f0

zpTmp5 = $f5
zpTmp3 = $f6
zpTmp2 = $f7		; alias with pAYPatternL
zpTmp1 = $f8		; alias with pAYPatternH
String = $f7		; alias with zpTmp2 & zpTmp1 & pAYPatternL
StringL = String
StringH = String+1

pAYPattern = $f7
pAYPatternL = pAYPattern
pAYPatternH = $f8
TmpL    = $f9	; alias with pAYData
pAYData = $f9
pAYDataL = pAYData
pAYDataH = pAYData+1
MBBase	= $fb
MBBaseL	= MBBase
MBBaseH	= MBBase+1

zpTmp	= $fe	; use from user-land (also used by exod_decrunch - so can't use from IRQ handler)
zpTmpL	= zpTmp
zpTmpH	= zpTmp+1

;------------------------------------------------------------------------------

; Setup Timer1 IRQ to trigger at 50Hz
; . Apple II NTSC cycles/frame = 262*65*60 => 1.021800 MHz, so set Timer1=0x4fd2 for 50Hz (-2 for 6522)
; . Apple II  PAL cycles/frame = 312*65*50 => 1.014000 MHz, so set Timer1=0x4f36 for 50Hz (-2 for 6522)

TIMER_INTERVAL = $4fd2

;------------------------------------------------------------------------------

!zone code

INIT:
; Pre: TODO: disable accelerators or set to 1MHz
;

	sei

	ldx		#($ff-ZP_BASE)
-		lda		ZP_BASE,x
		sta		saveZP,x
		dex
		bpl		-

	ldx		#2
-		lda		NMI,x
		sta		saveNMI,x
		dex
		bpl		-

	lda		IRQL
	sta		saveIRQL
	lda		IRQH
	sta		saveIRQH

	lda		$9e
	sta		save9E
	lda		$9f
	sta		save9F
	lda		$a7
	sta		saveA7
	lda		$a8
	sta		saveA8
	lda		$ae
	sta		saveAE
	lda		$af
	sta		saveAF
;	lda		$fd
;	sta		saveFD
;	lda		$fe
;	sta		saveFE
;	lda		$ff
;	sta		saveFF

	;

!cpu 65816
	sed
	lda		#$99
	clc
	adc		#$01
	cld
	bmi		@3
		lda		#1
		clc
		xce		; 65C02:NOP / 65816:exchange carry and emulation flags
		bcc		@1
			xce
			sta		is65816
			bra		@2
@1	sta		is65C02
@2	sta		is65C02or65816
@3
!cpu 6502

	lda		VERSION
	cmp		#VERSION_IIE_OR_HIGHER
	bne		+
		lda		#1
		sta		hasLowerCase
+

	jsr		isIIc
	bne		+
		; //c only: Enable MB4c (and disable mouse firmware). (mb-audit/GH#8)
		lda		#$ff
		sta		$C403		; SY6522_DDRA
		sta		$C404		; SY6522_TIMER1L_COUNTER - just writes to T1_LATCH(low)
+

	lda		TEXTON
	lda		MIXEDOFF
	lda		PAGE2OFF
	lda		HIRESOFF
	jsr		HOME	; perhaps better to clear to $00? ie. for floating-bus reads in GetSlotInfo()

	jsr		GetSlotInfo				; Scan all slots (7->1) for 6522(s) by calling Detect6522()
	bne		+
		lda		#<msg_NoMB
		ldx		#>msg_NoMB
		jsr		Print
		jmp		waitKeyAndExit

+	lda		#<msg_title
	ldx		#>msg_title
	jsr		Print
	jsr		Display

	lda		#<msg_cpu6502Detected
	ldx		#>msg_cpu6502Detected
	ldy		is65C02or65816
	beq		+
		lda		#<msg_cpu65C02Detected
		ldx		#>msg_cpu65C02Detected
		ldy		is65816
		beq		+
			lda		#<msg_cpu65816Detected
			ldx		#>msg_cpu65816Detected
+	jsr		Print
	lda		#$80+$0a
	jsr		COUT

	lda		#<msg_tuneTitle
	ldx		#>msg_tuneTitle
	jsr		Print
	lda		#$80+$0a
	jsr		COUT

	lda		#0
	sta		totalTests+0
	sta		totalTests+1
	sta		totalTests+2
;	sta		warningCount
	sta		numMegaAudioCards

	lda		#7
	sta		slotUnderTest
@nextSlot
		ldx		slotUnderTest
		lda		slotInfo,x
		beq		+
			and		#3
			sta		has6522
			jsr		DisplaySlotUpdate
			ldx		slotUnderTest
			jsr		Check6522		; Basic 6522 checks - test both 6522s
			bcc		++
				jsr		PrintTestFailedErrBytesBoth6522s
				; if either 6522 passed the tests then try to continue with this MB...
				lda		has6522
				ldx		errorValid
				beq		+++
					and		#%11111110
+++				ldx		errorValid6522B
				beq		+++
					and		#%11111101
+++				sta		has6522
				sta		zpTmp1
				tax
				beq		+					; ...otherwise move on to next MB
++			jsr		DetectSubunits	; ie. AY chips
			ldx		slotUnderTest
			jsr		DisplayCardUpdate

			jsr		PlayTune
			;
+		dec		slotUnderTest
		bne		@nextSlot

	;

waitKeyAndExit
	lda		#<msg_PressAnyKey
	ldx		#>msg_PressAnyKey
	jsr		Print
-		lda		KBD
		bpl		-
	lda		KBDSTRB

	;

exit

	lda		save9E
	sta		$9e
	lda		save9F
	sta		$9f
	lda		saveA7
	sta		$a7
	lda		saveA8
	sta		$a8
	lda		saveAE
	sta		$ae
	lda		saveAF
	sta		$af
;	lda		saveFD
;	sta		$fd
;	lda		saveFE
;	sta		$fe
;	lda		saveFF
;	sta		$ff

	lda		saveIRQL
	sta		IRQL
	lda		saveIRQH
	sta		IRQH

	ldx		#2
-		lda		saveNMI,x
		sta		NMI,x
		dex
		bpl		-

	ldx		#($ff-ZP_BASE)
-		lda		saveZP,x
		sta		ZP_BASE,x
		dex
		bpl		-

	rts

;------------------------------------------------------------------------------

ACTIVE_AY_HPOS = 17				; offset to "1234" in msg_activeAY

PlayTune
; Pre: MBBaseL(=$00),H

	jsr		SaveHV

	lda		#<msg_instructionsMB
	ldx		#>msg_instructionsMB
	ldy		isPhasorCard
	beq		+
		lda		#<msg_instructionsPH
		ldx		#>msg_instructionsPH
+	jsr		Print

	lda		#<msg_instructionsEsc	; no CR
	ldx		#>msg_instructionsEsc
	jsr		Print
	jsr		CLREOL
	jsr		CROUT

	lda		#<msg_activeAY		; no CR
	ldx		#>msg_activeAY
	jsr		Print
	jsr		CLREOL

	lda		isPhasorCard
	bne		+
		lda		#' '+$80		; if MB, then blank out the "34" chars
		ldy		#ACTIVE_AY_HPOS+2	; offset to "34"
		sta		(BASL),y
		iny
		sta		(BASL),y
+	jsr		UpdateActiveAYs

	;

	lda		MBBaseH

	sta		MB1x+2
	sta		MB2x+2
	sta		MB3x+2
	sta		MB4x+2
	sta		MB5x+2
	sta		MB6x+2

	sta		MB1y+2
	sta		MB2y+2
	sta		MB3y+2
	sta		MB4y+2
	sta		MB5y+2
	sta		MB6y+2

	;

	; TODO: make this user-selectable, and default to MB mode
	lda		isPhasorCard
	beq		+
		lda		#PH_PHASOR
		jsr		SetPhasorMode
+

	lda		#SY6522_A_PH_BASE
	sta		zpTmp3
	jsr		Init6522ForAY

	lda		#SY6522_B_BASE
	sta		zpTmp3
	jsr		Init6522ForAY

	;

	; pAYPatternL/H - is used by both userland & irq, but it's setup just once (here) and remains constant
	; It's referenced via variables: AYPatternIdx_user & AYPatternIdx_irq
	lda		#<AYPattern
	sta		pAYPatternL
	lda		#>AYPattern
	sta		pAYPatternH

	jsr		ResetAYPattern

	lda		#$20
	sta		NextAYChunkAddr_H_user
	sta		NextAYChunkAddr_H_irq

	jsr		DecrunchNext

	lda		#S_DECRUNCH_NEXT
	sta		State					; signal to main-loop to decrunch a 2nd chunk

	;

	; Setup Timer1 IRQ to trigger at 50Hz

	sei

	; Support case where 6522-A isn't detected, ie. use 6522-B for Timer1 IRQ
	ldx		#SY6522_A_PH_BASE
	lda		has6522
	and		#HAS_6522A
	bne		+
		ldx		#SY6522_B_BASE
+	stx		MBBaseL

	;

	lda		#<TIMER_INTERVAL
	ldy		#SY6522_TIMER1L_COUNTER
	sta		(MBBase),y
	lda		#>TIMER_INTERVAL
	ldy		#SY6522_TIMER1H_COUNTER
	sta		(MBBase),y

	lda		#ACR_FREERUNNING
	ldy		#SY6522_ACR
	sta		(MBBase),y				; Free running timer

	lda		#IER_SET|IxR_TIMER1
	ldy		#SY6522_IER
	sta		(MBBase),y				; Enable Timer1 IRQ

	lda		#<Interrupt
	ldx		#>Interrupt
	jsr		SetIrqNmiVectors

	jsr		NextAYChunk

	lda		#0
	sta		nFrameNum+0
	sta		nFrameNum+1
	sta		nFrameNum+2
	sta		g_MusicUpdate
	sta		g_PauseEnabled
	lda		#%00001111
	sta		AYMute_user

	cli

loop	lda		State
		beq		+	; S_NO_WORK
					; else: S_DECRUNCH_NEXT
			; Decrunch take ~28 frames, and each uncompressed chunk takes 1023*2 frames to playback (since BearAGrudge plays back at 25Hz)
			jsr		DecrunchNext
			lda		#S_NO_WORK
			sta		State

+		lda		isrFlag
		beq		+
			lda		#0
			sta		isrFlag
			jsr		DisplayMSF

+		lda		BUTTON0
		and		BUTTON1
		and		#$80
		beq		+
			sta		g_PauseEnabled	; press OA+CA keys to enable

+		lda		KBD
		bpl		loop
		bit		KBDSTRB

		cmp		#27+$80				; ESC to quit
		beq		done

		cmp		#'1'+$80			; toggle 1st AY
		bne		+
			lda		#1
			bne		++
+		cmp		#'2'+$80			; toggle 2nd AY
		bne		+
			lda		#2
			bne		++
+		cmp		#'3'+$80			; toggle 3rd AY (Phasor-only)
		bne		+
			lda		#4
			bne		++
+		cmp		#'4'+$80			; toggle 4th AY( Phasor-only)
		bne		+
			lda		#8
++			eor		AYMute_user
			sta		AYMute_user
			jsr		UpdateActiveAYs
			jmp		loop
+

pause	; step via one-shot mode
		lda		g_PauseEnabled		; NB. Pause is off by default
		beq		loop

		sei
		lda		#ACR_ONESHOT
		ldy		#SY6522_ACR
		sta		(MBBase),y
		lda		nFrameNum+2
		cli
-			cmp		nFrameNum+2
			beq		-

		ldy		nFrameNum+1			; Second
		ldx		nFrameNum+2			; Frame#
		jsr		PRNTYX
-			lda		KBD
			bpl		-
		bit		KBDSTRB
		tax		; keycode

		lda		#<TIMER_INTERVAL
		ldy		#SY6522_TIMER1L_COUNTER
		sta		(MBBase),y
		lda		#>TIMER_INTERVAL
		ldy		#SY6522_TIMER1H_COUNTER
		sta		(MBBase),y

		cpx		#' '+$80
		beq		pause

		; restart
		lda		#ACR_FREERUNNING
		ldy		#SY6522_ACR
		sta		(MBBase),y				; Free running timer
		jmp		loop

	;

done

	sei
		lda		#ACR_ONESHOT
		ldy		#SY6522_ACR
		sta		(MBBase),y

		ldy		#SY6522_IFR
-			lda		(MBBase),y
			and		#IxR_TIMER1
			beq		-

		lda		#IER_CLR|IxR_TIMER1
		ldy		#SY6522_IER
		sta		(MBBase),y				; Disable Timer1 IRQ
	cli

	lda		isPhasorCard
	beq		+
		lda		#PH_MOCKINGBOARD
		jsr		SetPhasorMode
+

	lda		#0
	sta		MBBaseL
	ldy		#SY6522_A_PH_BASE+SY6522_ORB	; Resets all AYs on 6522-A
	jsr		SF_ChipReset
	ldy		#SY6522_B_BASE+SY6522_ORB		; Resets all AYs on 6522-B
	jsr		SF_ChipReset

	jsr		RestoreHV

	rts

;--------------------------------------

UpdateActiveAYs
	ldy		#ACTIVE_AY_HPOS		; offset to "1234"
	lda		AYMute_user
	sta		zpTmp3

-	lda		(BASL),y
	cmp		#' '+$80			; end of string?
	beq		@done
	lsr		zpTmp3
	bcc		@inactive
;@active
		lda		(BASL),y
		and		#$7f
		sta		(BASL),y
		bne		+				; (bra)
@inactive
		lda		(BASL),y
		ora		#$80
		sta		(BASL),y

+		iny
		bne		-

@done
	rts

;--------------------------------------

ResetAYPattern
	lda		#0
	sta		AYPatternIdx
	rts

;--------------------------------------

; Called from user-land
DecrunchNext

	; Check for $00,$00 = end of pattern
	ldy		AYPatternIdx
	lda		(pAYPattern),y
	iny
	ora		(pAYPattern),y
	bne		+
		jsr		ResetAYPattern
+

	;
	; At the end of the compressed chunk, set the correct endAddress_h to decrunch to (decrunch occurs backwards)
	; . With an odd number of compressed chunks, then for each loop of the tune, chunks will alternate decrunching to $2000 or $4000
	;   eg. 1st time, chunk0 will decrunch to $2000; 2nd time it'll decrunch to $4000, etc

	ldy		AYPatternIdx

	lda		(pAYPattern),y		; lo(compressedAYxEnd)
	sta		zpTmpL
	iny
	lda		(pAYPattern),y		; hi(compressedAYxEnd)
	sta		zpTmpH

	ldy		#0
	lda		(zpTmp),y				; endAddr_h
	and		#$1f					; clr old $20 or $40
	ora		NextAYChunkAddr_H_user	; set new $20 or $40
	sta		(zpTmp),y

	lda		NextAYChunkAddr_H_user
	eor		#$60				; toggle: $20->$40 / $40->$20
	sta		NextAYChunkAddr_H_user

	;

	ldy		AYPatternIdx

	clc
	lda		(pAYPattern),y		; lo(compressedAYxEnd)
	adc		#COMPRESSED_CHUNK_END_ADJUST
	sta		_byte_lo
	iny

	lda		(pAYPattern),y		; hi(compressedAYxEnd)
	adc		#0
	sta		_byte_hi
	iny

	sty		AYPatternIdx

	;

	cld
	jsr		exod_decrunch		; NB. 0x8DEA6 cycles for chunk0

	rts

;--------------------------------------

; Called from IRQ handler
NextAYChunk

	lda		#0
	sta		pAYDataL

	lda		NextAYChunkAddr_H_irq
	sta		pAYDataH

	eor		#$60				; toggle: $20->$40 / $40->$20
	sta		NextAYChunkAddr_H_irq

	rts

;--------------------------------------

Interrupt
; Pre:
;	6502 has pushed P
;	Apple ROM has stored A to $45 (not Apple //e ROM!)
;

	txa 
	pha
	tya
	pha

	;

	inc		isrFlag			; Signal to main loop to update MSF display

	sed						; BCD mode
	clc
	lda		nFrameNum+2
	adc		#1
	sta		nFrameNum+2
	cmp		#$50
	bne		+
		lda		#0
		sta		nFrameNum+2
		clc
		lda		nFrameNum+1
		adc		#1
		sta		nFrameNum+1
		cmp		#$60
		bne		+
			lda		#0
			sta		nFrameNum+1
			clc
			lda		nFrameNum+0
			adc		#1
			sta		nFrameNum+0
+	cld

	;

	lda		g_MusicUpdate
	eor		#1
	sta		g_MusicUpdate
	bne		+
	jmp		.done
+

	;
	; Unpack the regs: 8 -> 11 bytes
	;

	ldy		#0
	lda		(pAYData),y
	ldx		#0
	sta		g_UnpackedRegs,x

	iny
	lda		(pAYData),y
	ldx		#2
	sta		g_UnpackedRegs,x

	iny
	lda		(pAYData),y
	ldx		#4
	sta		g_UnpackedRegs,x

	iny
	lda		(pAYData),y
	lsr
	lsr
	lsr
	lsr
	ldx		#1
	sta		g_UnpackedRegs,x
	lda		(pAYData),y
	and		#$0f
	ldx		#3
	sta		g_UnpackedRegs,x

	iny
	lda		(pAYData),y
	lsr
	lsr
	lsr
	lsr
	ldx		#5
	sta		g_UnpackedRegs,x
	lda		(pAYData),y
	and		#$0f
	ldx		#8
	sta		g_UnpackedRegs,x

	iny
	lda		(pAYData),y
	lsr
	lsr
	lsr
	lsr
	ldx		#9
	sta		g_UnpackedRegs,x
	lda		(pAYData),y
	and		#$0f
	ldx		#10
	sta		g_UnpackedRegs,x

	iny
	lda		(pAYData),y
	ldx		#6
	sta		g_UnpackedRegs,x

	iny
	lda		(pAYData),y
	ldx		#7
	sta		g_UnpackedRegs,x

	;

	lda		phasorMode
	cmp		#PH_PHASOR
	bne		+

		; Phasor mode: double the ABC periods

		asl		g_UnpackedRegs+AY_AFINE
		rol		g_UnpackedRegs+AY_ACOARSE

		asl		g_UnpackedRegs+AY_BFINE
		rol		g_UnpackedRegs+AY_BCOARSE

		asl		g_UnpackedRegs+AY_CFINE
		rol		g_UnpackedRegs+AY_CCOARSE

		jmp		++

+		; NOT Phasor mode: halve the Noise period (convert ZX to MB)

		lda		g_UnpackedRegs+AY_NOISEPER
		and		#AY_NOISE_MASK
		cmp		#1
		beq		++
			lsr
			sta		g_UnpackedRegs+AY_NOISEPER

++

	;

	ldx		#0			; default: Mockingboard
	lda		isEchoPlus
	bne		@ph_ep
	lda		phasorMode
	cmp		#PH_MOCKINGBOARD
	beq		+
@ph_ep	ldx		#AY_CS1	; Phasor in native mode, Phasor in Echo+ mode or Echo+
+	stx		AYChipSelect

	lda		AYMute_user
	sta		AYMute_irq

	;

NextAYPair
		lda		#AY_INACTIVE
		ora		AYChipSelect
		tax

		lda		#AY_LATCH
		ora		AYChipSelect
		sta		MB7x+1
		sta		MB7y+1

		lda		#AY_WRITE
		ora		AYChipSelect
		sta		MB8x+1
		sta		MB8y+1

		;
		; 1st AY in pair
		;

		lsr		AYMute_irq
		bcc		muteAY0

		ldy		#0
.sf_loop0
MB1x		sty		CARD_BASE+SY6522_A_PH_BASE+SY6522_ORA
MB7x		lda		#AY_LATCH
MB2x		sta		CARD_BASE+SY6522_A_PH_BASE+SY6522_ORB
MB3x		stx		CARD_BASE+SY6522_A_PH_BASE+SY6522_ORB	; Set INACTIVE
			lda		g_UnpackedRegs,y
MB4x		sta		CARD_BASE+SY6522_A_PH_BASE+SY6522_ORA
MB8x		lda		#AY_WRITE
MB5x		sta		CARD_BASE+SY6522_A_PH_BASE+SY6522_ORB
MB6x		stx		CARD_BASE+SY6522_A_PH_BASE+SY6522_ORB	; Set INACTIVE
			iny
			cpy		#AY_EFINE
			bne		.sf_loop0
		beq		+

muteAY0
		ldy		#SY6522_A_PH_BASE+SY6522_ORA
		jsr		MuteAY

+

		lda		isEchoPlus
		beq		+
			; Echo+ or Phasor in Echo+ mode
			; . allow keys '1' and '2' to operate on each respective "1st AY in pair"
			lda		AYMute_irq
			and		#%00000001
			sta		AYMute_irq
			jmp		skip2ndAY
+

		;
		; 2nd AY in pair
		;

		lsr		AYMute_irq
		bcc		muteAY1

		ldy		#0
.sf_loop1
MB1y		sty		CARD_BASE+SY6522_B_BASE+SY6522_ORA
MB7y		lda		#AY_LATCH
MB2y		sta		CARD_BASE+SY6522_B_BASE+SY6522_ORB
MB3y		stx		CARD_BASE+SY6522_B_BASE+SY6522_ORB	; Set INACTIVE
			lda		g_UnpackedRegs,y
MB4y		sta		CARD_BASE+SY6522_B_BASE+SY6522_ORA
MB8y		lda		#AY_WRITE
MB5y		sta		CARD_BASE+SY6522_B_BASE+SY6522_ORB
MB6y		stx		CARD_BASE+SY6522_B_BASE+SY6522_ORB	; Set INACTIVE
			iny
			cpy		#AY_EFINE
			bne		.sf_loop1

		beq		+

muteAY1
		ldy		#SY6522_B_BASE+SY6522_ORA
		jsr		MuteAY

+
skip2ndAY

	lda		AYChipSelect
	asl
	and		#AY_CS1|AY_CS2
	sta		AYChipSelect
	beq		+
	jmp		NextAYPair
+

	;

	clc
	lda		pAYData+0
	adc		#8						; AY regs packed into 8-byte sets
	sta		pAYData+0
	lda		pAYData+1
	adc		#0
	sta		pAYData+1

	; $ff,$ff = end of data
	ldy		#0
	lda		(pAYData),y
	iny
	and		(pAYData),y
	cmp		#$ff
	bne		+
		jsr		NextAYChunk
		lda		#S_DECRUNCH_NEXT
		sta		State				; signal to main-loop to decrunch next chunk
+

	;

.done
	lda		#IER_CLR|IxR_TIMER1
	ldy		#SY6522_IFR
	sta		(MBBase),y				; Clear Timer1 IRQ flag (may be using either 6522-A or 6522-B's Timer1)

	pla
	tay
	pla
	tax

	lda		$45
	rti

;------------------------------------------------------------------------------

MuteAY:
; Pre: Y = SY6522_ORA for chip A or B

	lda		MBBaseL
	pha
	lda		#0
	sta		MBBaseL

		lda		AYChipSelect
		bne		+

			; Mockingboard
			lda		#AY_ENABLE
			jsr		SF_SelectReg
			lda		#AY_DIS_A|AY_DIS_B|AY_DIS_C
			jsr		SF_WriteReg
			jmp		@done

+		and		#AY_CS1
		beq		+

			; Phasor: AY-CS1
			lda		#AY_ENABLE
			jsr		AY1_SelectReg
			lda		#AY_DIS_A|AY_DIS_B|AY_DIS_C
			jsr		AY1_WriteReg
			jmp		@done

+			; Phasor: AY-CS2
			lda		#AY_ENABLE
			jsr		AY2_SelectReg
			lda		#AY_DIS_A|AY_DIS_B|AY_DIS_C
			jsr		AY2_WriteReg

@done
	pla
	sta		MBBaseL
	rts

;------------------------------------------------------------------------------

SaveHV
	ldx		#0
-		lda		CH,x
		sta		saveZPTextVars,x
		inx
		cpx		#(BAS2H-CH)+1
		bne		-
	rts

;

RestoreHV
	ldx		#0
-		lda		saveZPTextVars,x
		sta		CH,x
		inx
		cpx		#(BAS2H-CH)+1
		bne		-
	rts

;------------------------------------------------------------------------------

GetSlotInfo
; Scan all slots for 6522s at $Cn00 and $Cn80
; Post: Z=1 (BEQ) if nothing found

	lda		#0
	sta		numMockingboards

	ldx		#7
-		lda		#0
		sta		slotInfo,x
		jsr		Detect6522
		lda		slotInfo,x
		beq		+
			inc		numMockingboards
+		dex
		bne		-

	lda		numMockingboards
	rts

;------------------------------------------------------------------------------

SetMBBase
; Pre: X=slot#
; Post: X=slot#

	txa
	ora		#$c0
	sta		MBBaseH
	lda		#0
	sta		MBBaseL
	rts

;------------------------------------------------------------------------------

DetectSubunits
; Detect Phasor card & AY8913
; Pre: zpTmp1 = slotInfo[slot]

	lda		#0
	sta		isSDMusic
	sta		isMegaAudioCard
	sta		isMB4C
	sta		isEchoPlus
	sta		isPhasorCard			; assume Mockingboard
	sta		hasSSI263				; ... no SSI263's
	sta		hasSC01					; ... no SC01
	sta		hasAY8913				; ... no AY8913's

	lda		#PH_MOCKINGBOARD
	sta		phasorMode

	; Determine if this is a Mockingboard or Phasor card

	lda		zpTmp1
	and		#HAS_6522B|HAS_6522A
	cmp		#HAS_6522B|HAS_6522A
	bne		@doneCardDetection

	; Determine if this is a MegaAudio

	jsr		DetectMegaAudioCard		; Post: Z=1 if no MegaAudio
	beq		+
		inc		numMegaAudioCards
		bne		@doneCardDetection
+

	; Determine if this is a MB4C or Echo+ or SD Music card
	; NB. if Phasor(Echo+ mode), then don't do the Phasor check - want to preserve the Echo+ mode for user

	jsr		DetectMB4CorEchoPlusorSDM	; Post: Z=1 if no MB4C/EchoPlus/SD Music
	beq		+
		; Indicate there's only a 6522 at $Cn80, otherwise some 6522 tests will fail
		; NB. For Phasor(Echo+ mode), CTRL+RESET will switch back to MB mode, so need to use 6522-B
		ldx		slotUnderTest
		lda		#HAS_6522B
		sta		slotInfo,x
		sta		has6522
		sta		zpTmp1
		bne		@doneCardDetection
+

	; Determine if this is a Mockingboard or Phasor card

	lda		#$55
	ldy		#SY6522_DDRB
	sta		(MBBase),y
	asl								; A=$AA
	iny								; SY6522_DDRA
	sta		(MBBase),y

	lda		#PH_PHASOR
	jsr		SetPhasorMode

	; Phasor card in Phasor mode has floating-bus at $Cn00-$Cn0F
	ldy		#SY6522_DDRB
	lda		#$55
	cmp		(MBBase),y
	bne		+
	asl								; A=$AA
	iny								; SY6522_DDRA
	cmp		(MBBase),y
	bne		+
	ldy		#SY6522_TIMER2L_COUNTER
	jsr		SF_GetTimerL
	beq		++
+		inc		isPhasorCard
++	lda		#PH_MOCKINGBOARD
	jsr		SetPhasorMode

@doneCardDetection

	;

;	jsr		DetectSSI263			; pre: zpTmp1
;	jsr		DetectSC01				; pre: zpTmp1
	jsr		DetectAY8913			; pre: zpTmp1

	lda		hasAY8913
	asl
	asl
	asl
	asl
	ldx		slotUnderTest
	ora		slotInfo,x

	ldy		isrNMIcount_A
	beq		+
		ora		#NMI_FOR_6522A
+

	ldy		isrNMIcount_B
	beq		+
		ora		#NMI_FOR_6522B
+

	sta		slotInfo,x				; slotInfo[slot] |= (hasAY8913 << 4)

	;
	; set slotInfo2
	;

	ldy		#CARDTYPE_SDMUSIC
	lda		isSDMusic
	bne		@setSlotInfo2

	dey
	lda		isMegaAudioCard
	bne		@setSlotInfo2

	dey
	lda		isMB4C
	bne		@setSlotInfo2

	dey
	lda		isEchoPlus
	bne		@setSlotInfo2

	dey
	lda		isPhasorCard
	bne		@setSlotInfo2

	dey		; CARDTYPE_UNKNOWN

@setSlotInfo2
	tya
	sta		slotInfo2,x

	rts

;------------------------------------------------------------------------------

RestoreFromSlotInfo2
; pre: X=slot#
; post: isSDMusic, isMegaAudioCard, isMB4C, isEchoPlus, isPhasorCard

	lda		#0
	sta		isSDMusic
	sta		isMegaAudioCard
	sta		isMB4C
	sta		isEchoPlus
	sta		isPhasorCard

	lda		slotInfo2,x
	ldx		#1
	and		#CARDTYPE_MASK
	tay

	beq		@done	; unknown
	dey
	beq		@phasor
	dey
	beq		@echoplus
	dey
	beq		@mb4c
	dey
	beq		@megaaudio
	; fall through...

@sdmusic
	stx		isSDMusic
	rts
@megaaudio
	stx		isMegaAudioCard
	rts
@mb4c
	stx		isMB4C
	rts
@echoplus
	stx		isEchoPlus
	rts
@phasor
	stx		isPhasorCard
@done
	rts

;------------------------------------------------------------------------------

SetPhasorMode
; Pre: A=phasorMode

	sta		phasorMode
	lda		MBBaseH
	asl
	asl
	asl
	asl								; slot * 16
	clc
	adc		phasorMode
	tax
	lda		$c080,x
	rts

;------------------------------------------------------------------------------

NMI_Handler
; Provide a wrapper for NMI, since there's no Apple II ROM support, other than vectoring to $3FA:
; . NMI asserted -> PUSH PC,P; PC=($FFFA)=$3FA -> JMP Check6522ISR_NMI (so doesn't execute the Apple II ROM)
; 6502's NMI is triggered on NMI(active low) falling edge (H->L).
; Interrupt source will be cleared by ISR.

	pha

	inc		isrNMIcount

	; setup for ISR's RTI
	lda		#>@NmiReturn
	pha
	lda		#<@NmiReturn
	pha
	php

	jmp		(NmiVector)				; this is the regular ISR for IRQ

@NmiReturn
	pla
	rti

; NB. 6502 can't page-cross!
NmiVector
	!byte	0,0

;------------------------------------------------------------------------------

SetIrqNmiVectors
; Pre: A(l),X(h) = ISR

	jsr		SetIrqVector

	; fall through...

;SetNmiVector
; Pre: A(l),X(h) = ISR

	sta		NmiVector+0
	stx		NmiVector+1

	lda		#$4C
	sta		NMI+0
	lda		#<NMI_Handler
	sta		NMI+1
	lda		#>NMI_Handler
	sta		NMI+2
	rts

SetIrqVector
; Pre: A(l),X(h) = ISR

	sta		IRQL
	stx		IRQH
	rts

;------------------------------------------------------------------------------

resetSubTestMinus1
	lda		#$ff
	bne		+

resetSubTest
	lda		#0
+	sta		subTestNum
	rts

;------------------------------------------------------------------------------

incSubTestBy1				; NB. Don't inc totalTests
; Post: Z=1
	inc		subTestNum
	lda		#0
	rts

;

incSubTestNum

	inc		subTestNum
	; fall through...

incTotalTests

	inc		totalTests+0
	bne		+
	inc		totalTests+1
+	rts

;------------------------------------------------------------------------------

SetError
; Pre: X = expected; A = actual

	inc		errorValid
	stx		errorExpected
	sta		errorActual
	rts

;

SetError6522B
; Pre: X = expected; A = actual

	inc		errorValid6522B
	stx		errorExpected6522B
	sta		errorActual6522B

	lda		testComponentNum
	sta		testComponentNum6522B
	lda		testNum
	sta		testNum6522B
	lda		subTestNum
	sta		subTestNum6522B
	rts

;------------------------------------------------------------------------------

@myWAIT_prealign
!align 255, 0, $EA		; align to 256 bytes (pad with $EA's)
!warn "myWAIT padding = ", * - @myWAIT_prealign

; Copy of the II ROM's WAIT routine.
;
; WAIT on a IIgs is not cycle accurate, since the WAIT description says it waits a minimum number of microseconds.
; The IIgs ROM has extra code to ensure the CPU is running at slow speed, and this adds extra time.

myWAIT
	sec
.x0
-	pha
.x1
--		sbc		#1
		bne		--
!if >.x1 != >* {
      !serious "branch crosses a page"
}
	pla
	sbc		#1
	bne		-
!if >.x0 != >* {
      !serious "branch crosses a page"
}
	rts

;------------------------------------------------------------------------------

isIIc
; Post: Z=1 if //c

	lda		VERSION
	cmp		#VERSION_IIE_OR_HIGHER
	bne		+

	lda		VERSION3
	cmp		#VERSION3_IIC
+	rts

;------------------------------------------------------------------------------

TEXTLINE0=$400
TEXTLINE1=$480
TEXTLINE2=$500
TEXTLINE3=$580
TEXTLINE4=$600
TEXTLINE5=$680
TEXTLINE6=$700

LINE1=TEXTLINE2
LINE2=TEXTLINE3
LINE3=TEXTLINE4
LINE4=TEXTLINE5
LINE5=TEXTLINE6					; "65nnn detected" & "MM:SS:FF"
SLOT1POS = $13					; pos left of '1'

Display
;(title)
;(blank)
;               1  2  3  4  5  6  7
;          $00: ?     1  S  C  P       ; ?=6522(VIA), 1=Sound-I(or Speech-I), S=Sound/Speech-I, M=MegaAudio, M4C=MB4C, E=Echo+, C=MB-C(or MB-A or Sound-II), P=Phasor, SDM=SD Music (Deluxe)
;          $80:    ?     S  C  P
;(blank)

	lda		#$80+'$'
	sta		LINE2+$0f
	sta		LINE3+$0f
	lda		#$80+'0'
	sta		LINE2+$10
	sta		LINE2+$11
	sta		LINE3+$11
	lda		#$80+'8'
	sta		LINE3+$10
	lda		#$80+':'
	sta		LINE2+$12
	sta		LINE3+$12
;	sta		LINE4+$12
;	lda		#$80+'S'
;	sta		LINE4+$10
;	lda		#$80+'P'
;	sta		LINE4+$11

	ldx		#7*3-1
	ldy		#7

-		tya
		ora		#$B0
		sta		LINE1+$12,x		; '1  2  3  4  5  6  7'

		lda		slotInfo,y
		lsr
		pha
		lda		#$80+' '		; C-flag not affected
		bcc		+
		lda		#$80+'?'
+		sta		LINE2+$12,x		; '?' or ' '

		pla
		lsr
		lda		#$80+' '		; C-flag not affected
		bcc		+
		lda		#$80+'?'
+		sta		LINE3+$12,x		; '?' or ' '

		dex
		dex
		dex
		dey
		bne		-

	lda		#$80+$0a
	jsr		COUT
	lda		#$80+$0a
	jsr		COUT
	lda		#$80+$0a
	jsr		COUT
	lda		#$80+$0a
	jsr		COUT
	lda		#$80+$0a
	jsr		COUT

	rts

;--------------------------------------

DisplaySlotUpdate

	ldx		#7*3-1
	ldy		#7

-		tya
		cmp		slotUnderTest
		bne		+
			ora		#'0'
			bne		++
			;
+			ora		#$80+'0'
++		sta		LINE1+$12,x		; '1  2  3  4  5  6  7'

		dex
		dex
		dex
		dey
		bne		-

	rts

;--------------------------------------

DisplayCardUpdate
; Pre: X=slot#

	;
	; Update cards
	;

	; x = (x-1)*3 + 1 = the position of the slot# (eg. '1')
	dex
	stx		zpTmp1
	txa
	asl
	sec							; sec to do the +1
	adc		zpTmp1
	tax

	lda		isPhasorCard
	beq		@mb

		; ...

+		lda		#$80+' '
		sta		zpTmp1			; x-1 pos: default: ' '
		sta		zpTmp2			; x+1 pos: default: ' '
		lda		#$80+'P'
		bne		@out

	;

@mb	; ...

+	lda		#$80+' '
	sta		zpTmp1			; x-1 pos: default: ' '
	sta		zpTmp2			; x+1 pos: default: ' '

	lda		has6522
	cmp		#%00000001			; only a 6522 at $00?
	bne		+
		lda		#$80+'1'		; MB-Sound I (has a 6522/AY8913 at $00) or MB-Speech I (has a 6522/SC01) at $00
		sta		LINE2+SLOT1POS,x

+	lda		has6522
	cmp		#%00000010			; only a 6522 at $80?
	bne		+
		lda		isSDMusic
		bne		@sdm
		lda		isEchoPlus
		bne		@ep
		lda		#$80+'?'		; don't know what this is!
		sta		LINE3+SLOT1POS,x

+	lda		has6522
	cmp		#%00000011			; 6522 at $00 && $80?
	bcc		@speech				; (branch if A < 3)
		lda		isMegaAudioCard
		beq		+
			lda		#$80+'M'
			bne		@out
+		lda		isMB4C
		beq		+
			lda		#$80+'M'	; 'M4C'
			sta		zpTmp1
			lda		#$80+'C'
			sta		zpTmp2
			lda		#$80+'4'
			bne		@out
+		lda		isEchoPlus
		beq		+
@ep			lda		#$80+'E'
			bne		@out
+		lda		isSDMusic
		beq		+
@sdm		lda		#$80+'S'	; 'SDM'
			sta		zpTmp1
			lda		#$80+'M'
			sta		zpTmp2
			lda		#$80+'D'
			bne		@out
+			lda		#$80+'C'	; MB-C or MB-Sound II (has 2x 6522/AY8913, but no SC01 nor SSI263)
			bne		@out

@out	sta		LINE2+SLOT1POS,x
		sta		LINE3+SLOT1POS,x
		lda		zpTmp1
		sta		LINE2+SLOT1POS-1,x
		sta		LINE3+SLOT1POS-1,x
		lda		zpTmp2
		sta		LINE2+SLOT1POS+1,x
		sta		LINE3+SLOT1POS+1,x

	;
	; Add info about any speech chips
	;

@speech
!if 0 {
	lda		hasSC01
	beq		@SSI263
		lda		#$80+'V'
		sta		LINE4+SLOT1POS+1,x

@SSI263
	lda		hasSSI263			; bitmap
	beq		@done
		lsr
		bcc		+
			pha
			lda		#$80+'A'	; $Cn40
			sta		LINE4+SLOT1POS-1,x
			pla
+		lsr
		bcc		+
			lda		#$80+'B'	; $Cn20
			sta		LINE4+SLOT1POS,x
+
}

@done
	rts

;------------------------------------------------------------------------------

DisplayMSF
	; 3233343536373839
	;  M M : S S : F F

	lda		#$80+':'
	sta		LINE5+34
	sta		LINE5+37

	ldx		#32
	lda		nFrameNum+0
	tay
	lsr
	lsr
	lsr
	lsr
	jsr		OutputNibble
	tya
	jsr		OutputNibble
	inx		; skip ':'

	lda		nFrameNum+1
	tay
	lsr
	lsr
	lsr
	lsr
	jsr		OutputNibble
	tya
	jsr		OutputNibble
	inx		; skip ':'

	lda		nFrameNum+2
	tay
	lsr
	lsr
	lsr
	lsr
	jsr		OutputNibble
	tya
	; fall through...

OutputNibble
; Pre: A=nibble to output (high bits can be set)
;  X=LINE5 offset
; Post: X++

	and		#$0f
	cmp		#10
	bcc		@digit
	clc
	adc		#$80+'A'-$0a
	bne		+
@digit
	clc
	adc		#$80+'0'
+	sta		LINE5,x
	inx
	rts

;------------------------------------------------------------------------------

;PrintTestFailed		; No error bytes
;	jsr		PrintLineTestFailed
;	; (next line)
;	rts

	;

PrintTestFailedErrBytesBoth6522s
	lda		errorValid
	beq		+
		jsr		PrintLineTestFailed6522A
+

	lda		errorValid6522B
	beq		+
		jsr		PrintLineTestFailed6522B
+	rts

	;

PrintLineTestFailed6522A
	jsr		PrintSlotNum

	lda		#<msg_TestFailed6522A
	ldx		#>msg_TestFailed6522A
	jsr		Print
	rts

	;

PrintLineTestFailed6522B
	jsr		PrintSlotNum

	lda		#<msg_TestFailed6522B
	ldx		#>msg_TestFailed6522B
	jsr		Print
	rts

	;

PrintSlotNum
	lda		#<msg_Slot
	ldx		#>msg_Slot
	jsr		Print
	lda		slotUnderTest
	ora		#$80+$30
	jsr		COUT
	lda		#$80+':'
	jmp		COUT

;------------------------------------------------------------------------------

Print
; Pre: A(l),X(h) = msg addr

	sta		StringL
	stx		StringH
	ldy		#0
@loop	lda		(String),y
		beq		+
		ldx		hasLowerCase
		bne		++
			cmp		#'a'
			bcc		++
			cmp		#'z'+1
			bcs		++
			and		#!($20)
++
		ora		#$80	; set high bit
		tax
		tya
		pha
		txa
		jsr		COUT
		pla
		tay
		iny
		bne 	@loop
+	rts

;------------------------------------------------------------------------------

COMPONENT_CARD		= $00
COMPONENT_6522		= $10
COMPONENT_AY8913	= $20
;COMPONENT_SC01		= $30
;COMPONENT_SSI263	= $40
COMPONENT_6522A		= $50
COMPONENT_6522B		= $60

!source "chip-6522.a"
!source "chip-ay8913.a"

;------------------------------------------------------------------------------

!zone data

saveZP			!fill ($100-ZP_BASE),0

; slotInfo bitfield:
							;   b7..4: AY bitmap (unused in this code)
NMI_FOR_6522B	= %00001000	;   b3:    NMI for 6522 at $80 (unused in this code)
NMI_FOR_6522A	= %00000100	;   b2:    NMI for 6522 at $00 (unused in this code)
HAS_6522B		= %00000010	;   b1:    6522 at $80
HAS_6522A		= %00000001	;   b0:    6522 at $00
slotInfo		!fill 8,0	; slot[0..7]

; slotInfo2 bitfield:
CARDTYPE_MASK		= %00001111
CARDTYPE_SDMUSIC	= 5
CARDTYPE_MEGAAUDIO	= 4
CARDTYPE_MB4C		= 3
CARDTYPE_ECHOPLUS	= 2
CARDTYPE_PHASOR		= 1
CARDTYPE_UNKNOWN	= 0
slotInfo2		!fill 8,0	; slot[0..7]

numMockingboards	!byte 0
;numMockingboardsForMCT	!byte 0		; num of Mockingboards for multi-card tests: need 2x 6522 per card
numMegaAudioCards		!byte 0

is65C02			!byte 0
is65816			!byte 0
is65C02or65816	!byte 0

slotUnderTest	!byte 0

errorValid		!byte 0
errorValid6522B	!byte 0

; NB. Keep these 5 vars consecutive so we can just do a copy to warningtestComponentNum,...,warningActual
testComponentNum	!byte COMPONENT_CARD
testNum			!byte 0
subTestNum		!byte 0
errorExpected	!byte 0
errorActual		!byte 0

; Keep error state of 6522-B, so that both 6522's can be tested
testComponentNum6522B	!byte 0
testNum6522B			!byte 0
subTestNum6522B			!byte 0
errorExpected6522B		!byte 0
errorActual6522B		!byte 0

totalTests		!byte 0,0,0

isSDMusic		!byte 0
isMegaAudioCard	!byte 0
isMB4C			!byte 0
isEchoPlus		!byte 0
isPhasorCard	!byte 0
phasorMode		!byte PH_MOCKINGBOARD

has6522			!byte 0
hasLowerCase	!byte 0
hasAY8913		!byte 0
hasSSI263		!byte 0
hasSC01			!byte 0

isrIFR_A		!byte 0
isrIFR_B		!byte 0
isrIFR			!byte 0
isrFlag			!byte 0
isrError		!byte 0,0
isrCopyA		!byte 0

isrNMIcount		!byte 0
isrNMIcount_A	!byte 0
isrNMIcount_B	!byte 0
;isrNMIcount_SC01	!byte 0

saveZPTextVars	!fill (BAS2H-CH)+1,0

saveIRQL		!byte 0
saveIRQH		!byte 0
saveNMI			!byte 0,0,0

;hasBeenReset	!byte 0
;userlandSP		!byte 0

;                  0123456789012345678901234567890123456789
msg_title	!text "Tune test v1.4, Tom Charlesworth,2023-24"
msg_titleEnd !text 0

msg_tuneTitle	!text "Bear A Grudge, (C) Dave Rogers, 1988",$d
msg_tuneTitleEnd !text 0

;                         0123456789012345678901234567890123456789
msg_instructionsMB !text "Press 1-2 to toggle tune on 2x AY chips",$d
msg_instructionsMBEnd !text 0
msg_instructionsPH !text "Press 1-4 to toggle tune on 4x AY chips",$d
msg_instructionsPHEnd !text 0
msg_instructionsEsc !text "ESC to quit"	; NB. No CR for this msg
msg_instructionsEscEnd !text 0

;                   0123456789012345678901234567890123456789
msg_activeAY !text "Active AY chips: 1234"	; NB. No CR for this msg
msg_activeAYEnd !text 0

msg_cpu6502Detected !text "6502 detected",$d
msg_cpu6502DetectedEnd !text 0
msg_cpu65C02Detected !text "65C02 detected",$d
msg_cpu65C02DetectedEnd !text 0
msg_cpu65816Detected !text "65816 detected",$d
msg_cpu65816DetectedEnd !text 0

msg_NoMB !text "No Mockingboard detected!",$d
msg_NoMBEnd !text 0

msg_Slot !text "Slot #"	; 0
msg_SlotEnd !text 0

msg_TestFailed6522A !text "Mockingboard failed test: 6522A",$d
msg_TestFailed6522AEnd !text 0

msg_TestFailed6522B !text "Mockingboard failed test: 6522B",$d
msg_TestFailed6522BEnd !text 0

msg_PressAnyKey !text $a,$a,$a,"Press any key to continue",$d
msg_PressAnyKeyEnd !text 0

;

nMBBaseHi		!byte 0
nFrameNum		!byte 0,0,0	; Minute:Second:FrameNum (@ 50Hz)
g_MusicUpdate	!byte 0
AYMute_user		!byte %00001111		; bit2=AY#3(Phasor-only), bit0=AY#2(Phasor-only), bit1=AY#1, bit0=AY#0
AYMute_irq		!byte 0
AYChipSelect	!byte 0
g_PauseEnabled	!byte 0
AYPatternIdx	!byte 0
NextAYChunkAddr_H_user	!byte 0
NextAYChunkAddr_H_irq	!byte 0

S_NO_WORK = 0
S_DECRUNCH_NEXT = 1
State			!byte S_NO_WORK

g_UnpackedRegs	!fill 11,0

; exomizer
save9E			!byte 0
save9F			!byte 0
saveA7			!byte 0
saveA8			!byte 0
saveAE			!byte 0
saveAF			!byte 0
;saveFD			!byte 0	; in saveZP
;saveFE			!byte 0	; in saveZP
;saveFF			!byte 0	; in saveZP

;--------------------------------------

DECRUNCH_FORWARDS = 0

exod_get_crunched_byte:
!if DECRUNCH_FORWARDS = 0 {
        lda _byte_lo
        bne _byte_skip_hi
        dec _byte_hi
_byte_skip_hi:
        dec _byte_lo
}
_byte_lo = * + 1
_byte_hi = * + 2
        lda $ffff               ; needs to be set correctly before
!if DECRUNCH_FORWARDS != 0 {
        inc _byte_lo
        bne _byte_skip_hi
        inc _byte_hi
_byte_skip_hi:
}
        rts                     ; decrunch_file is called.
; end_of_data needs to point to the address just after the address
; of the last byte of crunched data.
; -------------------------------------
!source "exodecrunch.asm"

;--------------------------------------

USE_CHUNKS_WITH_APPLEII_PERIODS = 1

AYDataCompressed
!if USE_CHUNKS_WITH_APPLEII_PERIODS {
	!binary "ChunksWithAppleIIPeriods-Packed\\bearagrudge-AY0-comp.bin"
	compressedAY0End = *
	!binary "ChunksWithAppleIIPeriods-Packed\\bearagrudge-AY1-comp.bin"
	compressedAY1End = *
	!binary "ChunksWithAppleIIPeriods-Packed\\bearagrudge-AY2-comp.bin"
	compressedAY2End = *
	!binary "ChunksWithAppleIIPeriods-Packed\\bearagrudge-AY3-comp.bin"
	compressedAY3End = *
	!binary "ChunksWithAppleIIPeriods-Packed\\bearagrudge-AY4-comp.bin"
	compressedAY4End = *
} else {
	!binary "ChunksWithSpectrum128Periods-Packed\\bearagrudge-AY0-comp.bin"
	compressedAY0End = *
	!binary "ChunksWithSpectrum128Periods-Packed\\bearagrudge-AY1-comp.bin"
	compressedAY1End = *
	!binary "ChunksWithSpectrum128Periods-Packed\\bearagrudge-AY2-comp.bin"
	compressedAY2End = *
	!binary "ChunksWithSpectrum128Periods-Packed\\bearagrudge-AY3-comp.bin"
	compressedAY3End = *
	!binary "ChunksWithSpectrum128Periods-Packed\\bearagrudge-AY4-comp.bin"
	compressedAY4End = *
}

;--------------------------------------

; 5 chunks of $2000 bytes (except last one)
; Defaulting to $0000 dst addr for decompression - so needs fixing up
;
; An even number of chunks is ok to just loop
; - if odd number, then playback of last & decrunch of first will overlap!
; - so need to decompress to a non-default address (ie. overwrite last 2 bytes of compressed stream with new destination)

COMPRESSED_CHUNK_END_ADJUST = 1	; point at endAddr_h to decrunch to (NB. decrunch startAddr is always $0000)

AYPattern
	; AYPatternIdx
	!word compressedAY0End-COMPRESSED_CHUNK_END_ADJUST
	!word compressedAY1End-COMPRESSED_CHUNK_END_ADJUST
	!word compressedAY2End-COMPRESSED_CHUNK_END_ADJUST
	!word compressedAY3End-COMPRESSED_CHUNK_END_ADJUST
	!word compressedAY4End-COMPRESSED_CHUNK_END_ADJUST
	!word $0000								; loop
